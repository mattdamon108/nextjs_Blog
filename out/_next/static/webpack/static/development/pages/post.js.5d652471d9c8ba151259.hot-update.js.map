{"version":3,"file":"static/webpack/static/development/pages/post.js.5d652471d9c8ba151259.hot-update.js","sources":["webpack:///./posts/2018-12-18-AWS-EB-Load-Balancer-redirect-to-https.md"],"sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \nexport const title = \"AWS Elastic Beanstalk makes redirect HTTP to HTTPS\"\nexport const createdAt = \"2018-12-18T00:00:00.000Z\"\nexport const filename = \"2018-12-18-AWS-EB-Load-Balancer-redirect-to-https\"\nexport const category = [\"backend\"]\nexport const tag = [\"aws\",\"eb\",\"elastic\",\"beanstalk\",\"redirect\",\"https\"]\nexport const thumb = \"2018-12-18_thumb.jpg\"\n\nconst layoutProps = {\n  title,\ncreatedAt,\nfilename,\ncategory,\ntag,\nthumb\n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components}>{`AWS Elastic Beanstalk makes redirect to HTTPS`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`by moondaddi on 2018-12-18`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Elastic Load balancer and Elastic Beanstalk`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`AWS Elastic Load balancer automatically distributes incoming application traffic across multiple AWS EC2. It enables your application's falut tolerance level higher and seamlessly providing the required amount of load balancing capacity needed to distribute application traffics.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When you deploy your application whatever it's built with any language to Elastic Beanstalk, Elastic Beanstalk automatically performs all required process in deployment for your application. One of requirements is Elastic Load balancer in front of EC2 which is generated by Elastic Beanstalk.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Elastic Load balancer is listening the port 80 as default. And you can set 443 port for HTTPS.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Redirect to HTTPS`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once everything sets up, You can access your application in Elastic Beanstalk through HTTP and also HTTPS.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want all requests to port 80 to redirect to port 443, HTTPS, you can make ssl_redirect.config file in .ebextensions in your application root directory.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-apache\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attribute\"}}>{`files`}</MDXTag>{`:\n    \"/`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attribute\"}}>{`etc`}</MDXTag>{`/httpd/conf.d/ssl_redirect.conf`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\":\n        mode: \"`}</MDXTag>{`000644`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"\n        owner: root\n        group: root\n        content: |\n            RewriteEngine On\n            <If \"`}</MDXTag>{`-n '`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-variable\"}}>{`%{HTTP:X-Forwarded-Proto}`}</MDXTag>{`' && `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-variable\"}}>{`%{HTTP:X-Forwarded-Proto}`}</MDXTag>{` != 'https'`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\">\n            RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]\n            </If>`}</MDXTag></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`How it works`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`During deployment of Elastic Beanstalk, it will check `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.ebextendsion`}</MDXTag>{` directory if any `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`*.config`}</MDXTag>{` files there. If config file is found, Elastic Beanstalk will proceed it before applying the deployment of your application.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ssl_redirect.config`}</MDXTag>{` file will be generated in path `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/etc/httpd/conf.d/`}</MDXTag>{` and this will works for apache server to check any none https request and redirect it to https.`}</MDXTag>\n\n\n\n\n\n\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAHA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAzCA;AACA;AADA;AA2CA;;;;A","sourceRoot":""}